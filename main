import os
import logging
from typing import List, Union, Optional
from contextlib import asynccontextmanager
from http import HTTPStatus
from pathlib import Path

from fastapi import FastAPI, Request, Response, status
from fastapi.staticfiles import StaticFiles

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    BotCommand,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from telegram.constants import ChatAction

# ===== –õ–æ–≥–∏ =====
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("softskills-bot")

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN. export BOT_TOKEN="<—Ç–æ–∫–µ–Ω>"')  # –∫—Ä–∏—Ç–∏—á–Ω–æ

PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "").rstrip("/")
if not PUBLIC_BASE_URL:
    log.warning("PUBLIC_BASE_URL –ø—É—Å—Ç ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ —Å–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

TEST_LINK = "https://softskills.rsv.ru/"

# ===== –ü—É—Ç–∏ –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º =====
BASE_DIR = Path(__file__).parent
STATIC_DIR = BASE_DIR / "static"
IMAGES_DIR = STATIC_DIR / "images"
IMAGES_DIR.mkdir(parents=True, exist_ok=True)

def media_path(name: str) -> Path:
    return IMAGES_DIR / name  # FastAPI StaticFiles —Ç–∞–∫–∂–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ /static –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ [web:309]

# ===== –ö–Ω–æ–ø–∫–∏/–∫–æ–ª–±—ç–∫–∏ =====
CB_TEST = "test"
CB_GUIDE_OPEN = "guide_open"
CB_GUIDE_FAST = "guide_fast"
CB_GUIDE_NEXT = "guide_next"
CB_GUIDE_PREV = "guide_prev"
CB_GUIDE_MENU = "guide_menu"
CB_EVENTS = "events"

# ===== –†–∞–∑–º–µ—Ç–∫–∞ =====
def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=CB_TEST)],
            [InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø–æ —à–∞–≥–∞–º)", callback_data=CB_GUIDE_OPEN)],
            [InlineKeyboardButton("–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)", callback_data=CB_GUIDE_FAST)],
            [InlineKeyboardButton("–ë–ª–∏–∂–∞–π—à–∏–µ –∞–Ω–æ–Ω—Å—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=CB_EVENTS)],
        ]
    )

def kb_guide(idx: int, last: int) -> InlineKeyboardMarkup:
    row = []
    if idx > 0:
        row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CB_GUIDE_PREV}:{idx-1}"))
    if idx < last:
        row.append(InlineKeyboardButton("–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"{CB_GUIDE_NEXT}:{idx+1}"))
    nav = [row] if row else []
    return InlineKeyboardMarkup(nav + [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_GUIDE_MENU)]])

# ===== –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–≥–æ–≤ =====
GUIDE_TEXTS: List[str] = [
    "1) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ\n\n"
    "–°–æ–∑–¥–∞–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ ¬´–†–æ—Å—Å–∏—è ‚Äì —Å—Ç—Ä–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π¬ª. "
    "–ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª –∏ –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É. –ù–∞ –ø–æ—á—Ç—É –ø—Ä–∏–¥—ë—Ç –∫–æ–¥ ‚Äî –≤–≤–µ–¥–∏ –µ–≥–æ –≤ –ø–æ–ª–µ ¬´–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è¬ª.",

    "2) –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n"
    "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. –í –±–ª–æ–∫–µ ¬´–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ¬ª –∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—á–µ–µ¬ª "
    "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Å–≤–æ–π –¶–µ–Ω—Ç—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π.",

    "3) –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
    "‚Ä¢ –≠—Ç–∞–ø—ã: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –±–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è.\n"
    "‚Ä¢ –ë–∞–∑–∞: 5 –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ + –∞–Ω–∫–µ—Ç–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: 4 —Ç–µ—Å—Ç–∞ (–¥–æ–±–∞–≤–ª—è—é—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –≤ —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç).\n"
    "‚Ä¢ –¢–µ—Å—Ç—ã –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n"
    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –Ω–æ—É—Ç–±—É–∫/–ü–ö –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.\n"
    "‚Ä¢ –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è; —á–∞—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n"
    "‚Ä¢ –û—Ç—á—ë—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤; –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å –Ω–∞ hh.ru.",

    f"4) –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç\n\n–ó–∞–π–¥–∏ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {TEST_LINK}\n"
    "–í–≤–æ–¥–∏ –¥–∞–Ω–Ω—ã–µ –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π e‚Äëmail (–Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω).",

    "5) –ù–∞–∂–∞—Ç—å ¬´–ù–∞—á–∞—Ç—å¬ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n\n"
    "–ó–∞–ø–æ–ª–Ω–∏ –§–ò–û –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í ¬´–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏¬ª —É–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–π –≤—É–∑ –∏ —Ü–µ–Ω—Ç—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π.",

    "6) –§–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è! üèÅ\n\n"
    "–ü—Ä–æ–π–¥–∏ 4 –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (—Å–∏–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã). –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é."
]

# ===== –ú–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç: –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ static/images =====
GUIDE_MEDIA: List[Union[None, str, List[str]]] = [
    "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-08-26 –≤ 17.26.15.png",  # –®–∞–≥ 1
    "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-08-26 –≤ 17.26.24.png",  # –®–∞–≥ 2
    "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-08-26 –≤ 17.26.34.png",  # –®–∞–≥ 3
    [  # –®–∞–≥ 4 ‚Äî –∞–ª—å–±–æ–º (–ø–æ—Ä—è–¥–æ–∫ –∫–∞–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: 17.39.00, 17.37.56)
        "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-08-26 –≤ 17.39.00.png",
        "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-08-26 –≤ 17.37.56.png",
    ],
    [  # –®–∞–≥ 5 ‚Äî –∞–ª—å–±–æ–º –∏–∑ 3 —Ñ–∞–π–ª–æ–≤
        "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-08-26 –≤ 17.40.06.png",
        # –í–æ –≤—Ç–æ—Ä–æ–º –∏–º–µ–Ω–∏ —É –≤–∞—Å –±—ã–ª–æ "‚Ä¶ 17.40.23 18.06.40.png" ‚Äî —Ç–∞–∫–æ–π —Ñ–∞–π–ª–∞, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ—Ç.
        # –û—Å—Ç–∞–≤–ª—è—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏–∑ –∫–æ–º–º–∏—Ç–∞: 17.40.23.png
        "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-08-26 –≤ 17.40.23.png",
        "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-08-26 –≤ 17.40.40.png",
    ],
    "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2025-08-26 –≤ 17.41.20.png",  # –®–∞–≥ 6
]
LAST_STEP = len(GUIDE_TEXTS) - 1

# ===== –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =====
def get_saved_step(context: ContextTypes.DEFAULT_TYPE) -> int:
    return int(context.user_data.get("guide_step", 0))

def set_saved_step(context: ContextTypes.DEFAULT_TYPE, idx: int) -> None:
    context.user_data["guide_step"] = max(0, min(idx, LAST_STEP))

# ===== –ü–æ–∫–∞–∑ —à–∞–≥–∞: —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º =====
async def send_guide_step(msg_target, idx: int):
    header = f"–®–∞–≥ {idx+1}/{LAST_STEP+1}"
    text = f"{header}\n\n{GUIDE_TEXTS[idx]}"
    kb = kb_guide(idx, LAST_STEP)
    media = GUIDE_MEDIA[idx]

    if isinstance(media, str):
        path = media_path(media)
        if not path.exists():
            log.error("Media file missing: %s", path)
        try:
            with open(path, "rb") as f:
                await msg_target.reply_photo(photo=f)
        except Exception as e:
            log.exception("send_guide_step photo failed: %s | path=%s", e, path)

    elif isinstance(media, list) and media:
        paths = [media_path(m) for m in media]
        for p in paths:
            if not p.exists():
                log.error("Media file missing in group: %s", p)
        files = []
        try:
            for p in paths:
                files.append(open(p, "rb"))
            group = [InputMediaPhoto(f) for f in files]
            await msg_target.reply_media_group(media=group)
        except Exception as e:
            log.exception("send_guide_step media_group failed: %s | paths=%s", e, paths)
        finally:
            for f in files:
                try:
                    f.close()
                except Exception:
                    pass

    await msg_target.reply_text(text, reply_markup=kb)

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
async def show_main_menu(context: ContextTypes.DEFAULT_TYPE, chat_id: int, target_message_id: Optional[int] = None) -> None:
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:"

    if target_message_id is not None:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id, message_id=target_message_id, text=text, reply_markup=kb_main()
            )
            context.user_data["last_menu_id"] = target_message_id
            return
        except Exception as e:
            log.info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é: %s ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ", e)
            context.user_data["last_menu_id"] = None

    sent = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=kb_main())
    context.user_data["last_menu_id"] = sent.message_id

# ===== –ö–æ–º–∞–Ω–¥—ã =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    name = ((user.first_name or "").strip()) or "–¥—Ä—É–≥"

    await context.bot.send_chat_action(chat_id=chat.id, action=ChatAction.TYPING)

    greeting = f"–ü—Ä–∏–≤–µ—Ç, {name}! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–ì–æ—Ç–æ–≤–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶"
    await context.bot.send_message(chat.id, greeting)
    await show_main_menu(context, chat.id)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n/capybara ‚Äî —Ñ–æ—Ç–æ –ø–æ URL\n/remind24 ‚Äî –Ω–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞")

CAPYBARA_URL = "https://i.imgur.com/CzXTtJV.jpg"
async def capybara_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(photo=CAPYBARA_URL, caption="–ö–∞–ø–∏–±–∞—Ä–∞ –ø–æ URL")

REMIND24_TEXT = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ‚ú®"
async def remind_job(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    try:
        await context.bot.send_message(chat_id=chat_id, text=REMIND24_TEXT)
    except Exception as e:
        log.warning("remind_job send failed: %s", e)

async def remind24_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    when_seconds = 24 * 60 * 60
    context.job_queue.run_once(
        remind_job,
        when=when_seconds,
        chat_id=update.effective_chat.id,
        name=f"remind24:{update.effective_chat.id}",
    )
    await update.message.reply_text("–û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ =====
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    chat_msg = q.message
    chat_id = chat_msg.chat.id

    if data == CB_TEST:
        msg = (
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.\n\n"
            f"1) –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç: {TEST_LINK}\n"
            "2) –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–∏–ª–∏ –≤–æ–π—Ç–∏), —É–∫–∞–∑–∞—Ç—å e‚Äëmail.\n"
            "3) –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π¬ª –∏ –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª.\n\n"
            "–ù—É–∂–Ω–∞ –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è? –ù–∞–∂–º–∏ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø–æ —à–∞–≥–∞–º)¬ª."
        )
        sent = await chat_msg.reply_text(msg, reply_markup=kb_main())
        context.user_data["last_menu_id"] = sent.message_id
        return

    if data == CB_GUIDE_OPEN:
        idx = get_saved_step(context)
        await send_guide_step(chat_msg, idx)
        return

    if data == CB_GUIDE_FAST:
        idx = 3
        set_saved_step(context, idx)
        await send_guide_step(chat_msg, idx)
        return

    if data.startswith(CB_GUIDE_NEXT) or data.startswith(CB_GUIDE_PREV):
        try:
            _, idx_str = data.split(":")
            idx = int(idx_str)
        except Exception:
            idx = get_saved_step(context)
        set_saved_step(context, idx)
        await send_guide_step(chat_msg, idx)
        return

    if data == CB_EVENTS:
        placeholder = (
            "–ü–æ–∫–∞ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ ‚Äî –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è. "
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –±–æ—Ç –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–∏—Ç ‚ú®"
        )
        sent = await chat_msg.reply_text(placeholder, reply_markup=kb_main())
        context.user_data["last_menu_id"] = sent.message_id
        return

    if data == CB_GUIDE_MENU:
        await show_main_menu(context, chat_id)
        return

# ===== PTB Application –∏ –∫–æ–º–∞–Ω–¥—ã =====
async def post_init(application: Application) -> None:
    try:
        await application.bot.set_my_commands(
            [
                BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
                BotCommand("capybara", "–ö–∞–ø–∏–±–∞—Ä–∞ –ø–æ URL"),
                BotCommand("remind24", "–ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"),
            ]
        )
    except Exception as e:
        log.warning("set_my_commands –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: %s", e)

ptb = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
ptb.add_handler(CommandHandler("start", start))
ptb.add_handler(CommandHandler("help", help_cmd))
ptb.add_handler(CommandHandler("capybara", capybara_cmd))
ptb.add_handler(CommandHandler("remind24", remind24_cmd))
ptb.add_handler(CallbackQueryHandler(on_button))

# ===== FastAPI + webhook lifespan =====
@asynccontextmanager
async def lifespan(_: FastAPI):
    if PUBLIC_BASE_URL:
        url = f"{PUBLIC_BASE_URL}/telegram-webhook"
        await ptb.bot.setWebhook(url)
        log.info("Webhook set to %s", url)
    else:
        log.error("PUBLIC_BASE_URL –ø—É—Å—Ç ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    async with ptb:
        await ptb.start()
        yield
        await ptb.stop()

app = FastAPI(lifespan=lifespan)

# –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")  # [web:309]

# ===== –í–µ–±—Ö—É–∫ =====
@app.post("/telegram-webhook")
async def telegram_webhook(request: Request):
    payload = await request.json()
    update = Update.de_json(payload, ptb.bot)
    await ptb.process_update(update)
    return Response(status_code=HTTPStatus.OK)

# ===== Health =====
@app.get("/health")
async def health():
    return {"status": "ok"}, status.HTTP_200_OK

@app.get("/ready")
async def ready():
    try:
        info = await ptb.bot.getWebhookInfo()
        return {
            "status": "ok",
            "webhook_url": info.url,
            "pending": info.pending_update_count,
        }, status.HTTP_200_OK
    except Exception as e:
        log.exception("Ready check failed: %s", e)
        return {"status": "error", "detail": str(e)}, status.HTTP_503_SERVICE_UNAVAILABLE

