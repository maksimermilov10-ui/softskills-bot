import os
import logging
import threading
import http.server
import socketserver
from typing import List, Union, Optional

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    InputMediaPhoto, BotCommand
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler
)
from telegram.constants import ChatAction

# ===== –õ–æ–≥–∏ =====
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)
log = logging.getLogger("softskills-bot")

# ===== –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN. –í—ã–ø–æ–ª–Ω–∏—Ç—å: export BOT_TOKEN="<—Ç–æ–∫–µ–Ω>"')

TEST_LINK = "https://softskills.rsv.ru/"

# callback-–∫–ª—é—á–∏
CB_TEST        = "test"
CB_GUIDE_OPEN  = "guide_open"
CB_GUIDE_FAST  = "guide_fast"
CB_GUIDE_NEXT  = "guide_next"
CB_GUIDE_PREV  = "guide_prev"
CB_GUIDE_MENU  = "guide_menu"
CB_EVENTS      = "events"

# ===== –î–∞–Ω–Ω—ã–µ –ø–æ –∞–Ω–æ–Ω—Å–∞–º =====
EVENTS: List[dict] = [
    # {"title": "–ë–∏–∑–Ω–µ—Å‚Äë–¥–µ–Ω—å –≤ –ì—É–±–∫–∏–Ω—Å–∫–æ–º", "date": "09.11, 14:00", "link": "https://t.me/gubkinsoft"},
]

# –§–æ—Ç–æ –∫–∞–ø–∏–±–∞—Ä—ã (–ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø Google Drive: uc?export=view&id=...)
CAPYBARA_PHOTO_URL = "https://drive.google.com/uc?export=view&id=1iMD-ztr-hyo3GRn-z-XpJGevGeg0Pswh"

# ===== –†–∞–∑–º–µ—Ç–∫–∞ =====
def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=CB_TEST)],
            [InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø–æ —à–∞–≥–∞–º)", callback_data=CB_GUIDE_OPEN)],
            [InlineKeyboardButton("–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)", callback_data=CB_GUIDE_FAST)],
            [InlineKeyboardButton("–ë–ª–∏–∂–∞–π—à–∏–µ –∞–Ω–æ–Ω—Å—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data=CB_EVENTS)],
        ]
    )

def kb_guide(idx: int, last: int) -> InlineKeyboardMarkup:
    row = []
    if idx > 0:
        row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CB_GUIDE_PREV}:{idx-1}"))
    if idx < last:
        row.append(InlineKeyboardButton("–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"{CB_GUIDE_NEXT}:{idx+1}"))
    nav = [row] if row else []
    return InlineKeyboardMarkup(nav + [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_GUIDE_MENU)]])

# ===== –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–≥–æ–≤ =====
GUIDE_TEXTS: List[str] = [
    "1) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ\n\n"
    "–°–æ–∑–¥–∞–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ ¬´–†–æ—Å—Å–∏—è ‚Äì —Å—Ç—Ä–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π¬ª. "
    "–ù–∞–∂–º–∏ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª –∏ –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É. –ù–∞ –ø–æ—á—Ç—É –ø—Ä–∏–¥—ë—Ç –∫–æ–¥ ‚Äî –≤–≤–µ–¥–∏ –µ–≥–æ –≤ –ø–æ–ª–µ ¬´–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è¬ª.",

    "2) –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\n\n"
    "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. –í –±–ª–æ–∫–µ ¬´–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ¬ª –∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü—Ä–æ—á–µ–µ¬ª "
    "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Å–≤–æ–π –¶–µ–Ω—Ç—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π.",

    "3) –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
    "‚Ä¢ –≠—Ç–∞–ø—ã: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –±–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è.\n"
    "‚Ä¢ –ë–∞–∑–∞: 5 –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ + –∞–Ω–∫–µ—Ç–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: 4 —Ç–µ—Å—Ç–∞ (–¥–æ–±–∞–≤–ª—è—é—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –≤ —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç).\n"
    "‚Ä¢ –¢–µ—Å—Ç—ã –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –ª—é–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n"
    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –Ω–æ—É—Ç–±—É–∫/–ü–ö –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.\n"
    "‚Ä¢ –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è; —á–∞—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n"
    "‚Ä¢ –û—Ç—á—ë—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤; –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å –Ω–∞ hh.ru.",

    f"4) –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç\n\n–ó–∞–π–¥–∏ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {TEST_LINK}\n"
    "–í–≤–æ–¥–∏ –¥–∞–Ω–Ω—ã–µ –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π e‚Äëmail (–Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω).",

    "5) –ù–∞–∂–∞—Ç—å ¬´–ù–∞—á–∞—Ç—å¬ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n\n"
    "–ó–∞–ø–æ–ª–Ω–∏ –§–ò–û –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í ¬´–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏¬ª —É–∫–∞–∂–∏:\n"
    "‚Äî –£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: –§–ì–ê–û–£ –í–û ¬´–†–û–°–°–ò–ô–°–ö–ò–ô –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–´–ô –£–ù–ò–í–ï–†–°–ò–¢–ï–¢ –ù–ï–§–¢–ò –ò –ì–ê–ó–ê "
    "(–ù–ê–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –£–ù–ò–í–ï–†–°–ò–¢–ï–¢) –ò–ú–ï–ù–ò –ò.–ú. –ì–£–ë–ö–ò–ù–ê¬ª (–ì—É–±–∫–∏–Ω—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)\n"
    "‚Äî –¶–µ–Ω—Ç—Ä –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: –¶–ï–ù–¢–† –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–ô –†–ì–£ –ù–ï–§–¢–ò –ò –ì–ê–ó–ê (–ù–ò–£) –ò–ú–ï–ù–ò –ò.–ú. –ì–£–ë–ö–ò–ù–ê (–†–ì–£–ù–ì)",

    "6) –§–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è! üèÅ\n\n"
    "–ü—Ä–æ–π–¥–∏ 4 –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (—Å–∏–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã):\n"
    "‚Äî –û–ø—Ä–æ—Å–Ω–∏–∫ –∂–∏–∑–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏\n"
    "‚Äî –¢–µ—Å—Ç ¬´–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏¬ª\n"
    "‚Äî –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫\n"
    "‚Äî –û–ø—Ä–æ—Å–Ω–∏–∫ –º–æ—Ç–∏–≤–∞—Ç–æ—Ä–æ–≤ –∏ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–æ–≤\n\n"
    "–û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é."
]

GUIDE_MEDIA: List[Union[None, str, List[str]]] = [
    "https://drive.google.com/uc?export=view&id=1cAedHiYboYhhmPNTvtp2TODSQg2Diwd2",
    "https://drive.google.com/uc?export=view&id=1o-yeU9jBBTVLnPlVsyqZMJsXAv1VYok9",
    "https://drive.google.com/uc?export=view&id=1I8QlmCim0kDbNawG5lySU5YPrDnK2jmx",
    "https://drive.google.com/uc?export=view&id=19iCWdqLz8J2cwfhOIJh71LDg6zFkm-rK",
    [
        "https://drive.google.com/uc?export=view&id=1mjIb2ePe_1VTgKjcch2Ljy5Y_kezyNEc",
        "https://drive.google.com/uc?export=view&id=1s7GsHKpDo-DElr1zHiIvo3-kFN2Ng6CK",
        "https://drive.google.com/uc?export=view&id=1WA2kyBKsOhEoTkpHcu-qHNuGgJepI5IG",
        "https://drive.google.com/uc?export=view&id=1_khnYowuImgHr4NortOtvsZbnsXzY716",
    ],
    "https://drive.google.com/uc?export=view&id=1mffyx-g4_-5AGzhug-p1CzqVudy_eELE",
]
LAST_STEP = len(GUIDE_TEXTS) - 1

# ===== –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =====
def get_saved_step(context: ContextTypes.DEFAULT_TYPE) -> int:
    return int(context.user_data.get("guide_step", 0))

def set_saved_step(context: ContextTypes.DEFAULT_TYPE, idx: int) -> None:
    context.user_data["guide_step"] = max(0, min(idx, LAST_STEP))

# ===== –ü–æ–∫–∞–∑ —à–∞–≥–∞ =====
async def send_guide_step(msg_target, idx: int):
    header = f"–®–∞–≥ {idx+1}/{LAST_STEP+1}"
    text = f"{header}\n\n{GUIDE_TEXTS[idx]}"
    kb = kb_guide(idx, LAST_STEP)
    media = GUIDE_MEDIA[idx]

    if isinstance(media, str):
        await msg_target.reply_photo(photo=media)
    elif isinstance(media, list) and media:
        await msg_target.reply_media_group(media=[InputMediaPhoto(m) for m in media])

    await msg_target.reply_text(text, reply_markup=kb)

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
async def show_main_menu(context: ContextTypes.DEFAULT_TYPE, chat_id: int, target_message_id: Optional[int] = None) -> None:
    text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:"

    if target_message_id is not None:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id, message_id=target_message_id, text=text, reply_markup=kb_main()
            )
            context.user_data["last_menu_id"] = target_message_id
            return
        except Exception as e:
            log.info("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ placeholder –Ω–µ —É–¥–∞–ª–æ—Å—å: %s ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é", e)
            context.user_data["last_menu_id"] = None

    sent = await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=kb_main())
    context.user_data["last_menu_id"] = sent.message_id

# ===== /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    name = ((user.first_name or "").strip()) or "–¥—Ä—É–≥"

    await context.bot.send_chat_action(chat_id=chat.id, action=ChatAction.TYPING)

    greeting = (
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        "–ì–æ—Ç–æ–≤–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ä¶"
    )
    await context.bot.send_message(chat.id, greeting)
    await show_main_menu(context, chat.id)

# ===== /help =====
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞")

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ =====
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    chat_msg = query.message
    chat_id = chat_msg.chat.id

    if data == CB_TEST:
        msg = (
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.\n\n"
            f"1) –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç: {TEST_LINK}\n"
            "2) –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–∏–ª–∏ –≤–æ–π—Ç–∏), —É–∫–∞–∑–∞—Ç—å e‚Äëmail.\n"
            "3) –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π¬ª –∏ –Ω–∞–∂–∞—Ç—å ¬´–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª.\n\n"
            "–ù—É–∂–Ω–∞ –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è? –ù–∞–∂–º–∏ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø–æ —à–∞–≥–∞–º)¬ª."
        )
        sent = await chat_msg.reply_text(msg, reply_markup=kb_main())
        context.user_data["last_menu_id"] = sent.message_id
        return

    if data == CB_GUIDE_OPEN:
        idx = get_saved_step(context)
        await send_guide_step(chat_msg, idx)
        return

    if data == CB_GUIDE_FAST:
        idx = 3
        set_saved_step(context, idx)
        await send_guide_step(chat_msg, idx)
        return

    if data.startswith(CB_GUIDE_NEXT) or data.startswith(CB_GUIDE_PREV):
        try:
            _, idx_str = data.split(":")
            idx = int(idx_str)
        except Exception:
            idx = get_saved_step(context)
        set_saved_step(context, idx)
        await send_guide_step(chat_msg, idx)
        return

    if data == CB_EVENTS:
        # 1) —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
        try:
            await chat_msg.reply_photo(photo=CAPYBARA_PHOTO_URL)
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–Ω–æ–Ω—Å–æ–≤: %s", e)

        # 2) –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç (–ø—É—Å—Ç–æ –∏–ª–∏ —Å–ø–∏—Å–æ–∫)
        if not EVENTS:
            placeholder = (
                "–ü–æ–∫–∞ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ ‚Äî –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è. "
                "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –±–æ—Ç –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–∏—Ç ‚ú®"
            )
            sent = await chat_msg.reply_text(placeholder, reply_markup=kb_main())
            context.user_data["last_menu_id"] = sent.message_id
            return

        lines = []
        buttons: List[List[InlineKeyboardButton]] = []
        for i, e in enumerate(EVENTS, start=1):
            title = e.get("title", "–°–æ–±—ã—Ç–∏–µ")
            date = e.get("date", "")
            link = e.get("link")
            lines.append(f"{i}) {title}" + (f" ‚Äî {date}" if date else ""))
            if link:
                buttons.append([InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å: {title}", url=link)])
        kb = InlineKeyboardMarkup(buttons + [[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CB_GUIDE_MENU)]])
        sent = await chat_msg.reply_text("\n".join(lines), reply_markup=kb)
        context.user_data["last_menu_id"] = sent.message_id
        return

    if data == CB_GUIDE_MENU:
        await show_main_menu(context, chat_id)
        return

# ===== –ü—Ä–æ—Å—Ç–∞—è ¬´–∑–∞–≥–ª—É—à–∫–∞¬ª HTTP-–ø–æ—Ä—Ç–∞ –¥–ª—è Render Free Web Service =====
def run_health_server():
    port = int(os.environ.get("PORT", "10000"))  # Render –∑–∞–¥–∞—ë—Ç PORT
    handler = http.server.SimpleHTTPRequestHandler
    # –û—Ç–∫–ª—é—á–∏–º —à—É–º–Ω—ã–µ –ª–æ–≥–∏ SimpleHTTPRequestHandler
    class QuietHandler(handler):
        def log_message(self, format, *args):  # noqa: N802
            return
    with socketserver.TCPServer(("", port), QuietHandler) as httpd:
        log.info("Health server started on port %s", port)
        httpd.serve_forever()

# ===== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ =====
async def post_init(application: Application) -> None:
    try:
        await application.bot.set_my_commands(
            [
                BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
                BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
            ]
        )
    except Exception as e:
        log.warning("set_my_commands –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã: %s", e)

# ===== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =====
def main():
    # 1) –ó–∞–ø—É—Å–∫–∞–µ–º health-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –¥–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_health_server, daemon=True).start()  # –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫

    # 2) –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ (async-loop –≤–Ω—É—Ç—Ä–∏ run_polling)
    app = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CallbackQueryHandler(on_button))
    app.run_polling(allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    main()

